<div class="row kill-vmargin">
                <div class="col s4 section-title top-alignment">Server</div>
                <div class="input-field col s4">
                    <select id="server-tablet-name" name="server-tablet-name" onchange="handleServerChange(this, 'north')">
                        <option value="" disabled selected>Change Server</option>
                        <option value="1">Option 1</option>
                        <option value="2">Option 2</option>
                        <option value="3">Option 3</option>
                        <option value="4">Option 4</option>
                    </select>
                </div>
                <div class="col s4 section-title"></div>
            </div>

            <div class="row">
                <div class="col s4 section-title">Connections</div>
                <div class="col s1 section-title center-align">C1</div>
                <div class="col s1 section-title center-align">C2</div>
                <div class="col s1 section-title center-align">C3</div>
                <div class="col s5"></div>
            </div>

            <div class="row">
                <div class="col s4 item-title top-alignment">Disconnected</div>

                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client1-dis" fill="red" stroke="black" stroke-width="10" stroke-miterlimit="10"
                                cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client2-dis" fill="red" stroke="black" stroke-width="10" stroke-miterlimit="10"
                                cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client3-dis" fill="red" stroke="black" stroke-width="10" stroke-miterlimit="10"
                                cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>

                <div class="col s5"></div>
            </div>

            <div class="row">
                <div class="col s4 item-title top-alignment">Waiting</div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client1-wait" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client2-wait" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client3-wait" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col s4 item-title top-alignment">Connected</div>

                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client1-connect" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client2-connect" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client3-connect" fill="transparent" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>

            </div>

// Sets color of the directed connection between two players
// source, sink = "N", "E", "S", "W"
// status = "disconnected", "waiting", "connected", "nocomm"
function setConnectionStatus(source, sink, status) {
    var c = noCommunicationColor;

    if (status == "disconnected") {
        c = disconnectedColor;
    }
    if (status == "waiting") {
        c = waitingColor;
    }
    if (status == "connected") {
        c = connectedColor;
    }

    if (source == "N") {
        if (sink == "N") {
            el = document.getElementById("nn");
        }
        if (sink == "E") {
            el = document.getElementById("ne");
        }
        if (sink == "S") {
            el = document.getElementById("ns");
        }
        if (sink == "W") {
            el = document.getElementById("nw");
        }
    }
    if (source == "E") {
        if (sink == "N") {
            el = document.getElementById("en");
        }
        if (sink == "E") {
            el = document.getElementById("ee");
        }
        if (sink == "S") {
            el = document.getElementById("es");
        }
        if (sink == "W") {
            el = document.getElementById("ew");
        }
    }
    if (source == "S") {
        if (sink == "N") {
            el = document.getElementById("sn");
        }
        if (sink == "E") {
            el = document.getElementById("se");
        }
        if (sink == "S") {
            el = document.getElementById("ss");
        }
        if (sink == "W") {
            el = document.getElementById("sw");
        }
    }
    if (source == "W") {
        if (sink == "N") {
            el = document.getElementById("wn");
        }
        if (sink == "E") {
            el = document.getElementById("we");
        }
        if (sink == "S") {
            el = document.getElementById("ws");
        }
        if (sink == "W") {
            el = document.getElementById("ww");
        }
    }

    el.setAttribute("fill", c);
}


//////////////////// seat /////////////////////////////
<div class="row kill-vmargin">
                <div class="col s4 section-title top-alignment">This Seat</div>
                <div class="input-field col s4">
                    <select id="this-tablet-seat" name="this-tablet-seat" onchange="handleTabletSeatChange(this)">
                        <option value="North" selected>North</option>
                        <option value="East">East</option>
                        <option value="South">South</option>
                        <option value="West">West</option>
                    </select>
                </div>
                <div class="col s4 section-title"></div>
            </div>

            // The seat is assigned provisionally and can be changed 
// at will. The assignment is made according to the
// alphobetical order of the tablet names.
function assignSeat() {
    var s = ["North", "East", "South", "West"];
    for (var i = 0; i < 4; i++) {
        tabletSeat[i] = s[i];
        if (thisTabletBtName == pairedBtNames[i]) {
            thisTabletSeat = s[i];
        }
    }
}

assignSeat();

    el = document.getElementById("this-tablet-seat");
    el.value = thisTabletSeat;
    M.FormSelect.init(el);
    M.updateTextFields();
    M.textareaAutoResize(el);

    console.log("seat", thisTabletSeat);

    function handleTabletSeatChange(el) {
    console.log("Call handleTabletSeatChange");
}
    //////////////////// seat /////////////////////////////

    ///////////////////svg circle ////////////////////////
    <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="server-connection" fill="red" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>

                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client1-connection" fill="red" stroke="black" stroke-width="10"
                                stroke-miterlimit="10" cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>

                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client2-connection" fill="red" stroke="black" stroke-width="10" stroke-miterlimit="10"
                                cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>

                <div class="col s1 center-align">
                    <div class="svg-container">
                        <svg version="1.1" viewBox="0 0 500 500" class="svg-content">
                            <circle id="client3-connection" fill="red" stroke="black" stroke-width="10" stroke-miterlimit="10"
                                cx="250" cy="250" r="200" />
                        </svg>
                    </div>
                </div>
    ///////////////////////////////////////////////////////////////////            

    class tabletObject {
    constructor(type, name, address, socket) {
        this._type = type;
        this._name = name;
        this._address = address;
        this._socket = socket;
    }
    ///// Getters //////////
    get type() {
        return this._type;
    }
    get name() {
        return this._name;
    }
    get address() {
        return this._address;
    }
    get socket() {
        return this._socket;
    }
    //// Setters ////////////////
    set type(val) {
        this._type = val;
    }
    set name(val) {
        this._name = val;
    }
    set address(val) {
        this._address = val;
    }
    set socket(val) {
        this._socket = val;
    }
}

////////////////////////////////////////////

//replaced by callback:
///////////////////////
networking.bluetooth.onAccept.addListener(function (acceptInfo) {
                    if (acceptInfo.socketId !== serverSocketId) {
                        console.log('onAccept -- acceptInfo.socketId != serverSocketId');
                        return;
                    }

                    tablet[tabIx].socket = acceptInfo.clientSocketId;
                    nbrConnectedClients += 1;
                    console.log("Nbr clients connected", nbrConnectedClients, tablet);
                    if (nbrConnectedClients == 3) {
                        setBtConnectionState("server", "connected");
                    }

                    //Close server socket
                    networking.bluetooth.close(serverSocketId);
                    listeningForConnectionRequest = false;

                    console.log("Accepted Connection: ", "Number: ", nbrConnectedClients, "Server Socket: ", serverSocketId);
                    nextTabIx = findNextUnconnectedClient();
                    console.log("next tabIx", nextTabIx, tablet);
                    if (nextTabIx > 0) {
                        popupBox(seatName + " Tablet Connected", "Press OK and then press 'Connect' on the " + seatOrderWord[tablet[nextTabIx].seatIx] + " tablet", "connect-next-client", "OK", "", "");
                    } else {
                        popupBox(seatName + " Tablet Connected", "All tablets communicate", "last-client-connected", "OK", "", "");
                    }
                });

                uuidCount = uuidCount - 1;
    console.log("Start Calling", thisTabletIx, tablet[thisTabletIx], client, uuidCount);

    if (tablet[thisTabletIx].socket < 0) { //if not connected

        networking.bluetooth.connect(deviceAddress, uuid[uuidCount], function (socketId) {
            thisClientSocketId = socketId;
            tablet[thisTabletIx].socket = socketId;
            tablet[thisTabletIx].uuid = uuid[uuidCount];
            //console.log("Client connected, socket = ", socketId);
            setBtConnectionState(client, "connected");
            setBtConnectionState("server", "connected");
            //Notify Server who the Client is.
            sendMessage("this", "server", "confirm-connection", tablet[thisTabletIx].name);
        }, function (errorMessage) {
            console.log("error Calling", "server: ", tablet[serverTabletIx], "this: ", tablet[thisTabletIx], "socket: ", thisClientSocketId, "uuid: ", uuid[uuidCount]);
            console.error(errorMessage);
            //popupBox("Bluetooth Caller Error", errorMessage, "btCallerError", "OK", "", "");
        });
    } else {
        console.log("Connection Request while socket already assigned");
    }

    //////////////>>>>>>>>>>>>>>>>>>>>>>>>>>>Inactive previous versions of client connect offer <<<<<<<<<<<<<<<<<<<<
// Offers to connect to the server
//
function startBtCalling() {
    var deviceAddress;
    console.log("start calling");
    if (tablet[thisTabletIx].socket < 0) { //if not connected
        deviceAddress = tablet[serverTabletIx].address;
        //networking.bluetooth.connect(deviceAddress, uuid, function (socketId) {
        console.log("Connect Client", thisTabletIx, tablet[thisTabletIx]);
        console.log("Connect", deviceAddress, tablet[thisTabletIx].uuid);
        networking.bluetooth.connect(deviceAddress, tablet[thisTabletIx].uuid, function (socketId) {
            thisClientSocketId = socketId;
            tablet[thisTabletIx].socket = socketId;
            //console.log("Client connected, socket = ", socketId);
            setBtConnectionState("client1", "connected");
            setBtConnectionState("server", "connected");
            //Notify Server who the Client is.
            sendMessage("this", "server", "confirm-connection", tablet[thisTabletIx].name);
        }, function (errorMessage) {
            console.log("error Calling", "server: ", tablet[serverTabletIx], "this: ", tablet[thisTabletIx], "socket: ", thisClientSocketId);
            console.error(errorMessage);
            popupBox("Bluetooth Caller Error", errorMessage, "btCallerError", "OK", "", "");
        });
    } else {
        console.log("Connection Request while socket already assigned");
    }
}

//Client Connection using Promise to overcome
//the problem of asynchronous response when the connection is accepted
//
function doBtClientConnection() {
    var deviceAddress;
    console.log("Async Client Calling");
    if (tablet[thisTabletIx].socket < 0) { //if not connected
        deviceAddress = tablet[serverTabletIx].address;

        var connectionPromise = new Promise((resolve, reject) => {

            networking.bluetooth.connect(deviceAddress, tablet[thisTabletIx].uuid, function (socketId) {
                thisClientSocketId = socketId;
                tablet[thisTabletIx].socket = socketId;

                setBtConnectionState("client1", "connected");
                setBtConnectionState("server", "connected");

                sendMessage("this", "server", "confirm-connection", tablet[thisTabletIx].name); //Notify Server who the Client is.
                resolve(socketId);
            }, function (errorMessage) {
                console.log("error Calling", "server: ", tablet[serverTabletIx], "this: ", tablet[thisTabletIx], "socket: ", thisClientSocketId);
                console.error(errorMessage);
                popupBox("Bluetooth Caller Error", errorMessage, "btCallerError", "OK", "", "");
                reject("Connection failed ");
            });
        });

        connectionPromise.then((data) => {
            console.log("Promise Then OK", data);
        }, (error) => {

            console.log("Promise Then Error", error);
        });
    } else {
        console.log("Connection Request while socket already assigned");
    }
}